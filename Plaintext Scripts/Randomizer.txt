print("Loaded randomizer v2")

worldGlobals.allTetros = {
  ["**1"]=s1, ["**2"]=s2, ["**3"]=s3, ["**4"]=s4, ["**5"]=s5,
  ["**6"]=s6, ["**7"]=s7, ["**8"]=s8, ["**9"]=s9, ["**10"]=s10,
  ["**11"]=s11, ["**12"]=s12, ["**13"]=s13, ["**14"]=s14, ["**15"]=s15,
  ["**16"]=s16, ["**17"]=s17, ["**18"]=s18, ["**19"]=s19, ["**20"]=s20,
  ["**21"]=s21, ["**22"]=s22, ["**23"]=s23, ["**24"]=s24, ["**25"]=s25,
  ["**26"]=s26, ["**27"]=s27, ["**28"]=s28, ["**29"]=s29, ["**30"]=s30,
  ["DI1"]=DI1, ["DI2"]=DI2,
  ["DJ1"]=DJ1, ["DJ2"]=DJ2, ["DJ3"]=DJ3, ["DJ4"]=DJ4, ["DJ5"]=DJ5,
  ["DL1"]=DL1, ["DL2"]=DL2, ["DL3"]=DL3,
  ["DT1"]=DT1, ["DT2"]=DT2, ["DT3"]=DT3, ["DT4"]=DT4,
  ["DZ1"]=DZ1, ["DZ2"]=DZ2, ["DZ3"]=DZ3, ["DZ4"]=DZ4,
  ["EL1"]=EL1, ["EL2"]=EL2, ["EL3"]=EL3, ["EL4"]=EL4,
  ["EO1"]=EO1,
  ["ES1"]=ES1, ["ES2"]=ES2, ["ES3"]=ES3, ["ES4"]=ES4,
  ["MI1"]=MI1,
  ["MJ1"]=MJ1,
  ["ML1"]=ML1, ["ML2"]=ML2, ["ML3"]=ML3, ["ML4"]=ML4,
  ["MO1"]=MO1,
  ["MS1"]=MS1, ["MS2"]=MS2,
  ["MT1"]=MT1, ["MT2"]=MT2, ["MT3"]=MT3, ["MT4"]=MT4, ["MT5"]=MT5,
  ["MT6"]=MT6, ["MT7"]=MT7, ["MT8"]=MT8, ["MT9"]=MT9, ["MT10"]=MT10,
  ["MZ1"]=MZ1, ["MZ2"]=MZ2, ["MZ3"]=MZ3, ["MZ4"]=MZ4,
  ["NI1"]=NI1, ["NI2"]=NI2, ["NI3"]=NI3, ["NI4"]=NI4, ["NI5"]=NI5,
  ["NI6"]=NI6,
  ["NJ1"]=NJ1, ["NJ2"]=NJ2, ["NJ3"]=NJ3, ["NJ4"]=NJ4,
  ["NL1"]=NL1, ["NL2"]=NL2, ["NL3"]=NL3, ["NL4"]=NL4, ["NL5"]=NL5,
  ["NL6"]=NL6, ["NL7"]=NL7, ["NL8"]=NL8, ["NL9"]=NL9, ["NL10"]=NL10,
  ["NO1"]=NO1, ["NO2"]=NO2, ["NO3"]=NO3, ["NO4"]=NO4, ["NO5"]=NO5,
  ["NO6"]=NO6, ["NO7"]=NO7,
  ["NS1"]=NS1, ["NS2"]=NS2, ["NS3"]=NS3, ["NS4"]=NS4,
  ["NT1"]=NT1, ["NT2"]=NT2, ["NT3"]=NT3, ["NT4"]=NT4, ["NT5"]=NT5,
  ["NT6"]=NT6, ["NT7"]=NT7, ["NT8"]=NT8, ["NT9"]=NT9, ["NT10"]=NT10,
  ["NT11"]=NT11, ["NT12"]=NT12,
  ["NZ1"]=NZ1, ["NZ2"]=NZ2, ["NZ3"]=NZ3, ["NZ4"]=NZ4, ["NZ5"]=NZ5,
  ["NZ6"]=NZ6
}

worldGlobals.tetros = {
  "**1",  "**2",  "**3",  "**4",  "**5",  "**6",  "**7",  "**8",  "**9",  "**10",
  "**11", "**12", "**13", "**14", "**15", "**16", "**17", "**18", "**19", "**20",
  "**21", "**22", "**23", "**24", "**25", "**26", "**27", "**28", "**29", "**30", 
  "DI1",  "DI2",  "DJ1",  "DJ2",  "DJ3",  "DJ4",  "DJ5",  "DL1",  "DL2",  "DL3",
  "DT1",  "DT2",  "DT3",  "DT4",  "DZ1",  "DZ2",  "DZ3",  "DZ4",  "EL1",  "EL2",
  "EL3",  "EL4",  "EO1",  "ES1",  "ES2",  "ES3",  "ES4",  "MI1",  "MJ1",  "ML1",
  "ML2",  "ML3",  "ML4",  "MO1",  "MS1",  "MS2",  "MT1",  "MT2",  "MT3",  "MT4",
  "MT5",  "MT6",  "MT7",  "MT8",  "MT9",  "MT10", "MZ1",  "MZ2",  "MZ3",  "MZ4",
  "NI1",  "NI2",  "NI3",  "NI4",  "NI5",  "NI6",  "NJ1",  "NJ2",  "NJ3",  "NJ4",
  "NL1",  "NL2",  "NL3",  "NL4",  "NL5",  "NL6",  "NL7",  "NL8",  "NL9",  "NL10",
  "NO1",  "NO2",  "NO3",  "NO4",  "NO5",  "NO6",  "NO7",  "NS1",  "NS2",  "NS3",
  "NS4",  "NT1",  "NT2",  "NT3",  "NT4",  "NT5",  "NT6",  "NT7",  "NT8",  "NT9",
  "NT10", "NT11", "NT12", "NZ1",  "NZ2",  "NZ3",  "NZ4",  "NZ5",  "NZ6"
}

for sigilName, sigil in pairs(worldGlobals.allTetros) do
  assert(sigilName == sigil:GetName(), "Sigil " .. sigil:GetName() .. " is saved as variable " .. sigilName)
end

local talosProgress = nexGetTalosProgress(worldGlobals.worldInfo)

if not talosProgress:IsVarSet("Randomizer_Generated") then
  print("Generating Sigil Configuration")
  local mode = talosProgress:GetCodeValue("Randomizer_Mode")
  if mode == -1 then
    mode = 1
  end

  local seed = talosProgress:GetCodeValue("Randomizer_Seed")
  if seed == -1 then
    seed = mthRndL()
    talosProgress:SetCode("Randomizer_Seed", seed)
  end
  print("Using Seed", seed)
  
  -- Blum Blum Shub Randomizer
  -- Unlike the built-in, we can seed this
  local rngState =  4 + seed^2 % 0x04dd42bb
  local function rand(min, max)
    rngState = rngState^2 % 0x04dd42bb
    return mthFloorF((rngState * (max - min))/0x04dd42ba + min)
  end
  
  --local function rand(min, max) return mthRndRangeL(min, max) end
  
  local markers = {
  -- These can be accessed without any requirements (world A)
    ["WorldA"] = {
      "001a_SPM_000_PM_008",
      "001_SPM_000_PM_005",
      "005_SPM_000_PM_009",
      "006_SPM_000_PM_003",
      "007_SPM_000_PM_006",
      "008_SPM_000_PM_016",
      "011_SPM_000_PM_009",
      "012_SPM_000_PM_004",
      "013_SPM_000_PM_006",
      "015_SRT_SPM_000_PM_017",
      "015_SRT_SPM_000_PM_018",
      "017_SPM_000_PM_023",
      "020_SPM_000_PM_014",
      "107_SPM_000_PM_007",
      "108_SPM_000_PM_012",
      "111_SPM_000_PM_012",
      "201_SPM_000_PM_013",
      "201_SRT_SPM_000_PM_004",
      "202b_SPM_000_PM_004",
      "202c_SPM_000_PM_003",
      "202e_SPM_000_PM_004",
      "202f_SPM_000_PM_003",
      "220_SPM_000_PM_032",
      "204_SPM_000_PM_004",
      "207_SPM_000_PM_005",
      "209_SPM_000_PM_012",
      "210_SPM_000_PM_015",
      "211_SPM_000_PM_008",
      "212_SPM_000_PM_017",
      "218_SPM_000_PM_016",
      "244_SPM_000_PM_008",
      "244_SRT_SPM_000_PM_006",
      "303_SPM_000_PM_010",
      "305_SPM_000_PM_004",
      "Cloud_1_02_SRT_SPM_000_PM_016",
      "Cloud_1_02_SRT_SPM_001_PM_003",
      "Cloud_1_03_SRT_SPM_000_PM_005",
      "Cloud_1_04_SRT_SPM_000_PM_007",
      "Cloud_1_06_SRT_SPM_000_PM_007",
      "Cloud_1_07_SRT_SPM_000_PM_021"
    },
  -- Require World B
    ["WorldB"] = {
      "113_SPM_000_PM_036",
      "118_SPM_000_PM_062",
      "120_SPM_000_PM_029",
      "203_SPM_000_PM_011",
      "205_SPM_000_PM_003",
      "206_SPM_000_PM_021",
      "208_SPM_000_PM_014",
      "213_SPM_000_PM_010",
      "215_SPM_000_PM_013",
      "221_SPM_002_PM_001",
      "222_SPM_004_PM_001",
      "223_SPM_000_PM_009",
      "224_SRT_SPM_000_PM_071",
      "224_SRT_SPM_000_PM_091",
      "238_SPM_000_PM_018",
      "239_SPM_000_PM_018",
      "300a_SPM_000_PM_007",
      "301_SPM_000_PM_010",
      "302_SPM_000_PM_008",
      "310_SPM_000_PM_024",
      "311_SPM_000_PM_041",
      "314_SPM_000_PM_012",
      "315_TAM_002_PM_001",
      "316_SPM_000_PM_012",
      "319_SPM_000_PM_008",
      "321_SPM_000_PM_005",
      "322_SPM_000_PM_008",
      "401_SPM_004_PM_008",
      "402_SPM_000_PM_020",
      "407_SPM_000_PM_018",
      "409_SPM_000_PM_024",
      "414_SPM_000_PM_007",
      "Cloud_2_01_SRT_SPM_000_PM_004",
      "Cloud_2_02_SRT_SPM_000_PM_039",
      "Cloud_2_03_SRT_SPM_002_PM_013",
      "Cloud_2_04_SRT_SPM_000_PM_017"
    },
  -- Require World C
    ["WorldC"] = {
      "112_SPM_000_PM_034",
      "114_SPM_000_PM_032",
      "216_SPM_000_PM_015",
      "217_SPM_000_PM_040",
      "219_SPM_000_PM_008",
      "225_SPM_000_PM_044",
      "226_SPM_000_PM_039",
      "227_SPM_002_PM_033",
      "229_SPM_000_PM_070",
      "230_SPM_000_PM_019",
      "232_SPM_000_PM_012",
      "233_SPM_000_PM_015",
      "234_SPM_000_PM_015",
      "308_SPM_000_PM_017",
      "309_SPM_000_PM_018",
      "312_SPM_000_PM_032",
      "313_SPM_000_PM_016",
      "317_SPM_000_PM_024",
      "318_SPM_000_PM_026",
      "328_SPM_000_PM_016",
      "403_SPM_000_PM_015",
      "404_SPM_000_PM_022",
      "405_SRT_SPM_000_PM_047",
      "405_SRT_SPM_000_PM_050",
      "408_SPM_000_PM_033",
      "408_SRT_SPM_000_PM_034",
      "416_SPM_000_PM_026",
      "417_SPM_000_PM_029",
      "418_SPM_000_PM_014",
      "Cloud_3_01_SRT_SPM_000_PM_017",
      "Cloud_3_02_SRT_TAM_001",
      "Cloud_3_03_SRT_SPM_000_PM_069",
      "Cloud_3_05_SRT_SPM_000_PM_035",
      "Cloud_3_05_SRT_SPM_002_PM_016",
      "Cloud_3_05_SRT_SPM_003_PM_012",
      "Cloud_3_06_SRT_SPM_000_PM_008",
      "Cloud_3_07_SRT_SPM_000_PM_021",
      "Islands_01_SRT_SPM_000_PM_003"
    },
  -- Require Star Worlds
    ["StarWorlds"] = {
      "115_SRT_TAM_004_PM_016",
      "117_SRT_SPM_000_PM_028",
      "119_SRT_SPM_000_PM_033",
      "214_SRT_SPM_000_PM_025",
      "306_SRT_SPM_000_PM_016",
      "411_SRT_SPM_000_PM_014",  
      "235_SRT_SPM_000_PM_037",
      "320_SRT_SPM_000_PM_046",
      "504_SRT_SPM_000_PM_021"
    },
  -- Require Tower Access
    ["Tower"] = {
      "LeapOfFaith_PM_010",
      "Secret_28_SRT_SPM_000_PM_004"
    },
  -- Require Items
    ["Items"] = {
      "202d_SPM_000_PM_002", -- Technically DCTS doesn't, but no one else would try
      "Cloud_2_04_SRT_SPM_002_PM_002",
      "Cloud_2_05_SRT_TAM_003_PM_003",
      "Cloud_2_07_SRT_TAM_001_PM_004"
    }
  }



  -- Default, tries to prevent softlocks
  if mode == 1 then
    print("Using Mode 1")
    local index = 0
    local currentMarkers = {}
    
    for _,v in pairs({31, 33, 38, 45}) do -- A Gate: DI1, DJ1, DL1, DZ1
      index = rand(1, #markers.WorldA)
      talosProgress:SetCode(markers.WorldA[index], v)
      table.remove(markers.WorldA, index)
    end
    
    local nextHub = rand(1, 8)
    -- B First
    if 1 <= nextHub and nextHub <= 4 then
      -- B Gate: DI2, DL2, DT1, DT2, DZ2
      for _,v in pairs({32, 39, 41, 42, 46}) do
        index = rand(1, #markers.WorldA)
        talosProgress:SetCode(markers.WorldA[index], v)
        table.remove(markers.WorldA, index)
      end
      
      -- Part of C Gate: DJ2, DJ3
      for _,v in pairs({34, 35}) do
        index = rand(1, #markers.WorldB)
        talosProgress:SetCode(markers.WorldB[index], v)
        table.remove(markers.WorldB, index)
      end
      
      for i=1, #markers.WorldA do table.insert(currentMarkers, markers.WorldA[i]) end
      for i=1, #markers.WorldB do table.insert(currentMarkers, markers.WorldB[i]) end
      -- Rest of C Gate: DL3, DT3, DT4, DZ3
      for _,v in pairs({40, 43, 44, 47}) do
        index = rand(1, #currentMarkers)
        talosProgress:SetCode(currentMarkers[index], v)
        table.remove(currentMarkers, index)
      end
      
      for i=1, #markers.WorldC do table.insert(currentMarkers, markers.WorldC[i]) end
      
    -- C First
    elseif 5 <= nextHub and nextHub <= 7 then
      -- C Gate: DJ2, DJ3, DL3, DT3, DT4, DZ3
      for _,v in pairs({34, 35, 40, 43, 44, 47}) do
        index = rand(1, #markers.WorldA)
        talosProgress:SetCode(markers.WorldA[index], v)
        table.remove(markers.WorldA, index)
      end
      
       -- Part of B Gate: DI2
      index = rand(1, #markers.WorldC)
      talosProgress:SetCode(markers.WorldC[index], 32)
      table.remove(markers.WorldC, index)
      
      for i=1, #markers.WorldA do table.insert(currentMarkers, markers.WorldA[i]) end
      for i=1, #markers.WorldC do table.insert(currentMarkers, markers.WorldC[i]) end
      -- Rest of B Gate: DL2, DT1, DT2, DZ2
      for _,v in pairs({39, 41, 42, 46}) do
        index = rand(1, #currentMarkers)
        talosProgress:SetCode(currentMarkers[index], v)
        table.remove(currentMarkers, index)
      end
      
      for i=1, #markers.WorldB do table.insert(currentMarkers, markers.WorldB[i]) end      
      
    -- Both
    elseif nextHub == 8 then
      -- B + C Gates: DI2, DJ2, DJ3, DL2, DL3, DT1, DT2, DT3, DT4, DZ2, DZ3
      for _,v in pairs({32, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47}) do
        index = rand(1, #markers.WorldA)
        talosProgress:SetCode(markers.WorldB[index], v)
        table.remove(markers.WorldA, index)
      end
      
      for i=1, #markers.WorldA do table.insert(currentMarkers, markers.WorldA[i]) end
      for i=1, #markers.WorldB do table.insert(currentMarkers, markers.WorldB[i]) end 
      for i=1, #markers.WorldC do table.insert(currentMarkers, markers.WorldC[i]) end      
    end

    -- Connector + Fan: ML1, ML2, MS1, MT1, MT2, MT3, MT4, MZ1
    for _,v in pairs({60, 61, 65, 67, 68, 69, 70, 77}) do
      index = rand(1, #currentMarkers)
      talosProgress:SetCode(currentMarkers[index], v)
      table.remove(currentMarkers, index)
    end
    
    for i=1, #markers.Tower do table.insert(currentMarkers, markers.Tower[i]) end
    for i=1, #markers.Items do table.insert(currentMarkers, markers.Items[i]) end
    
    -- Stars: **1 through **30
    for v=1,30 do
      index = rand(1, #currentMarkers)
      talosProgress:SetCode(currentMarkers[index], v)
      table.remove(currentMarkers, index)
    end
    
    for i=1, #markers.StarWorlds do table.insert(currentMarkers, markers.StarWorlds[i]) end
    
    -- Everything Else
    for _,v in pairs({36, 37, 48, 49, 50, 51, 52, 53, 54, 55,
                      56, 57, 58, 59, 62, 63, 64, 66, 71, 72,
                      73, 74, 75, 76}) do
      index = rand(1, #currentMarkers)
      talosProgress:SetCode(currentMarkers[index], v)
      table.remove(currentMarkers, index)      
    end
    for v=78,129 do
      index = rand(1, #currentMarkers)
      talosProgress:SetCode(currentMarkers[index], v)
      table.remove(currentMarkers, index)    
    end
    

  -- Fully Random
  elseif mode == 2 then
    print("Using Mode 2")
    local allMarkers = {}
    for _,v in pairs(markers) do
      for i=1,#v do
        table.insert(allMarkers, v[i])
      end
    end
    -- Knuth randomization
    for i = 1, #allMarkers do
      local otherMarker = allMarkers[rand(1, i)]
      talosProgress:SetCode(allMarkers[i], talosProgress:GetCodeValue(otherMarker))
      talosProgress:SetCode(otherMarker, i)
    end
  end

  -- You can clear this var to force a re-roll
  talosProgress:SetVar("Randomizer_Generated")
end

-- Move sigils onto markers in this world
for _, worldMarker in pairs(worldMarkers) do
  local sigilNum = talosProgress:GetCodeValue(worldMarker:GetName())
  local sigil = worldGlobals.allTetros[worldGlobals.tetros[sigilNum]]
  assert(sigil ~= nil, "Marker " .. worldMarker:GetName() .. " does not have a sigil assigned to it!")
  sigil:SetPlacement(worldMarker:GetPlacement())
end

SignalEvent("Randomizer_Finished")